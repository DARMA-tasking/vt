
#
# Usage:
# ------
#
# This docker compose file parameterizes build configurations using environment
# variables from the host. The default values for the build configuration
# variables are set in `.env`.
#
# Variables:
#   ARCH={amd64, arm64v8, ...}
#   COMPILER_TYPE={gnu, clang}
#   COMPILER={gcc-5, gcc-6, gcc-7, gcc-8, gcc-9, gcc-10,
#             clang-3.9, clang-4.0, clang-5.0, clang-6.0, clang-7, clang-8,
#             clang-9, clang-10}
#   REPO=lifflander1/vt
#   UBUNTU={18.04, 20.04}
#   ULIMIT_CORE=0
#
# DARMA/vt Configuration Variables:
#   VT_LB=1              # Enable load balancing
#   VT_TRACE=0           # Enable tracing
#   VT_MIMALLOC=0        # Enable mimalloc memory allocator
#   VT_DOCS=0            # Enable doxygen build
#   VT_TRACE_RT=0        # Enable tracing at runtime (for testing)
#   VT_ASAN=0            # Enable address sanitizer
#   BUILD_TYPE=release   # CMake build type
#
# Examples:
#
#  $ COMPILER=gcc-8 docker-compose build ubuntu-cpp
#  $ COMPILER=gcc-8 docker-compose run ubuntu-cpp
#

# Need verision >= 3.5 for the features in use
version: '3.5'

# Named volumes must be predefined according the docker compose rules. Many
# combinations have already been added, but if a needed configuration is missing
# add it to this list. For example, for ARM64v8 on Ubuntu 20.04 with clang-9,
# add `arm64v8-ubuntu-20.04-clang-9-cache`.
volumes:
  amd64-ubuntu-18.04-clang-3.9-cache:
  amd64-ubuntu-18.04-clang-4.0-cache:
  amd64-ubuntu-18.04-clang-5.0-cache:
  amd64-ubuntu-18.04-clang-6.0-cache:
  amd64-ubuntu-18.04-clang-7-cache:
  amd64-ubuntu-18.04-clang-8-cache:
  amd64-ubuntu-18.04-clang-9-cache:
  amd64-ubuntu-20.04-clang-10-cache:
  amd64-ubuntu-18.04-gcc-5-cache:
  amd64-ubuntu-18.04-gcc-6-cache:
  amd64-ubuntu-18.04-gcc-7-cache:
  amd64-ubuntu-18.04-gcc-8-cache:
  amd64-ubuntu-20.04-gcc-9-cache:
  amd64-ubuntu-20.04-gcc-10-cache:
  amd64-alpine-clang-3.9-cache:
  amd64-alpine-clang-4.0-cache:
  amd64-alpine-clang-5.0-cache:
  amd64-alpine-clang-6.0-cache:
  amd64-alpine-clang-7-cache:
  amd64-alpine-clang-8-cache:
  amd64-alpine-clang-9-cache:
  amd64-alpine-clang-10-cache:
  amd64-alpine-gcc-5-cache:
  amd64-alpine-gcc-6-cache:
  amd64-alpine-gcc-7-cache:
  amd64-alpine-gcc-8-cache:
  amd64-alpine-gcc-9-cache:
  amd64-alpine-gcc-10-cache:
  arm64v8-ubuntu-18.04-gcc-7-cache:
  arm64v8-alpine-gcc-7-cache:

# Define basic rules for ccache used across multiple services. The beauty of
# docker compose with cached volumes is that similarily configured builds will
# reuse a ccache volume making build speeds much faster than a fresh build each
# time.
x-ccache: &ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_COMPRESS: 1
  CCACHE_COMPRESSLEVEL: 5
  CCACHE_MAXSIZE: 5G
  CCACHE_DIR: /build/ccache

# Define rules for VT configuration options across various services
x-vtopts: &vtopts
  VT_LB_ENABLED: ${VT_LB:-1}
  VT_TRACE_ENABLED:  ${VT_TRACE:-0}
  VT_MIMALLOC_ENABLED: ${VT_MIMALLOC:-0}
  VT_DOXYGEN_ENABLED: ${VT_DOCS:-0}
  VT_TRACE_RUNTIME_ENABLED: ${VT_TRACE_RT:-0}
  VT_ASAN_ENABLED: ${VT_ASAN:-0}
  VT_POOL_ENABLED: ${VT_POOL:-1}
  VT_ZOLTAN_ENABLED: ${VT_ZOLTAN:-0}
  CMAKE_BUILD_TYPE: ${BUILD_TYPE:-release}
  https_proxy: ${PROXY-}
  http_proxy: ${PROXY-}

services:
  ##############################################################################
  # C++ builds of VT on ubuntu/alpine platform from container baseline
  # Ubuntu gcc-7 debug build:
  #   docker-compose run -e CMAKE_BUILD_TYPE=debug ubuntu-cpp|alpine-cpp
  ubuntu-cpp:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: &default-args
        arch: ${ARCH}
        proxy: ${PROXY}
        compiler: ${COMPILER}
        zoltan_enabled: ${VT_ZOLTAN:-0}
    ulimits: &ulimits
      core: ${ULIMIT_CORE}
    environment:
      <<: *ccache
      <<: *vtopts
    volumes: &ubuntu-volumes
      - .:/vt:delegated
      - ${CACHE}${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cache:/build:delegated
    command: &vt-cpp-command >
      /bin/bash -c "
        /vt/ci/build_cpp.sh /vt /build &&
        /vt/ci/test_cpp.sh  /vt /build"

  ##############################################################################
  # C++ build/test/clean target for VT on ubuntu platform from container
  # baseline.
  #
  # Example:
  #   docker-compose run ubuntu-cpp-clean
  ubuntu-cpp-clean:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: *default-args
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *vtopts
    volumes: *ubuntu-volumes
    command: &vt-build-test-clean-cpp-command >
      /bin/bash -c "
        /vt/ci/build_cpp.sh /vt /build &&
        /vt/ci/test_cpp.sh  /vt /build &&
        /vt/ci/clean_cpp.sh /vt /build"

  ##############################################################################
  # Interactive C++ setup of VT on ubuntu platform from container baseline.
  #
  # After running:
  #   docker-compose run ubuntu-cpp-interactive
  #
  # You will get a command line where you can run the build command:
  #   $ /vt/ci/build_cpp.sh /vt /build
  #   $ /vt/ci/test_cpp.sh  /vt /build
  ubuntu-cpp-interactive:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: *default-args
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *vtopts
    volumes: *ubuntu-volumes

  ##############################################################################
  # Build C++ container with VT installed in the container on ubuntu platform
  # from container baseline.
  ubuntu-vt:
    image: ${REPO}:vt-${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: build
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args:
        <<: *default-args
        <<: *vtopts
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *vtopts
    volumes: *ubuntu-volumes
    command: &cpp-command >
      /bin/bash -c "
        /vt/ci/test_cpp.sh  /vt /build"

  ##############################################################################
  # Build documentation for VT in the container on ubuntu platform from
  # container baseline.
  ubuntu-docs:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-docs
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-docs.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args:
        <<: *default-args
        token: ${TOKEN}
    ulimits: *ulimits
    environment:
      <<: *ccache
      VT_LB_ENABLED: ${VT_LB:-1}
      VT_TRACE_ENABLED:  ${VT_TRACE:-1}
      VT_DOXYGEN_ENABLED: 1
      CMAKE_BUILD_TYPE: ${BUILD_TYPE:-release}
    volumes: *ubuntu-volumes
    command: &docs-cpp-command >
      /bin/bash -c "
        /vt/ci/build_cpp.sh /vt /build ${TOKEN}"

  ##############################################################################
  # C++ build of VT within an alpine linux container (limited to clang
  # compilers)
  alpine-cpp:
    image: ${REPO}:${ARCH}-alpine-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/alpine-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-alpine-${COMPILER}-cpp
      args: *default-args
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *vtopts
    volumes: &alpine-volumes
      - .:/vt:delegated
      - ${CACHE}${ARCH}-alpine-${COMPILER}-cache:/build:delegated
    command: *vt-cpp-command

  ##############################################################################
  # C++ build/test/clean target for VT on alpine platform from container
  # baseline.
  alpine-cpp-clean:
    image: ${REPO}:${ARCH}-alpine-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/alpine-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-alpine-${COMPILER}-cpp
      args: *default-args
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *vtopts
    volumes: *alpine-volumes
    command: *vt-build-test-clean-cpp-command
