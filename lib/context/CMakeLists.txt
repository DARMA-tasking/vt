cmake_minimum_required(VERSION 3.8)
project(fcontext)

set(CMAKE_CXX_STANDARD 14)

enable_language(CXX ASM)

include (CTest)
enable_testing()


set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(PROJECT_EXAMPLE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/examples)
set(PROJECT_TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests)

file(
  GLOB
  HEADER_FILES
  ${PROJECT_SOURCE_DIR}/*.h
)

file(
  GLOB
  SOURCE_FILES
  ${PROJECT_SOURCE_DIR}/*.cc
)

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(CPU_ARCH "x86_64")
else()
  set(CPU_ARCH "i386")
endif()

if (APPLE)
  set(ASM_EXT "sysv_macho_gas.S") # OSX
else()
  set(ASM_EXT "sysv_elf_gas.S")  # Linux/Unix
endif()

set(
  ASM_SOURCES
  "${PROJECT_SOURCE_DIR}/asm/make_${CPU_ARCH}_${ASM_EXT}"
  "${PROJECT_SOURCE_DIR}/asm/jump_${CPU_ARCH}_${ASM_EXT}"
  "${PROJECT_SOURCE_DIR}/asm/ontop_${CPU_ARCH}_${ASM_EXT}"
)

#message("ASM_SOURCES=${ASM_SOURCES}")

set(FCONTEXT_LIBRARY fcontext)

add_library(
  ${FCONTEXT_LIBRARY}
  STATIC
  ${HEADER_FILES} ${SOURCE_FILES} ${ASM_SOURCES}
)

install(TARGETS ${FCONTEXT_LIBRARY} EXPORT ${FCONTEXT_LIBRARY} DESTINATION lib)
install(FILES ${HEADER_FILES} DESTINATION include)

include_directories(${PROJECT_SOURCE_DIR})

set(PROJECT_EXAMPLE_C_DIR ${PROJECT_EXAMPLE_DIR}/c_interface)
set(PROJECT_EXAMPLE_CXX_DIR ${PROJECT_EXAMPLE_DIR}/cxx_interface)

file(
  GLOB
  PROJECT_C_EXAMPLES
  RELATIVE
  "${PROJECT_EXAMPLE_C_DIR}"
  "${PROJECT_EXAMPLE_C_DIR}/*.cc"
)

file(
  GLOB
  PROJECT_CXX_EXAMPLES
  RELATIVE
  "${PROJECT_EXAMPLE_CXX_DIR}"
  "${PROJECT_EXAMPLE_CXX_DIR}/*.cc"
)

file(
  GLOB
  PROJECT_EXAMPLE_TOP_HEADERS
  RELATIVE
  "${PROJECT_EXAMPLE_DIR}"
  "${PROJECT_EXAMPLE_DIR}/*.h"
)

file(
  GLOB
  PROJECT_EXAMPLE_TOP_IMPL
  RELATIVE
  "${PROJECT_EXAMPLE_DIR}"
  "${PROJECT_EXAMPLE_DIR}/*.cc"
)

include_directories(${PROJECT_EXAMPLE_DIR})

message("PROJECT_EXAMPLE_DIR=${PROJECT_EXAMPLE_DIR}")
message("PROJECT_EXAMPLE_TOP_HEADERS=${PROJECT_EXAMPLE_TOP_HEADERS}")
message("PROJECT_EXAMPLE_TOP_IMPL=${PROJECT_EXAMPLE_TOP_IMPL}")
message("PROJECT_EXAMPLE_C_DIR=${PROJECT_EXAMPLE_C_DIR}")
message("PROJECT_EXAMPLE_CXX_DIR=${PROJECT_EXAMPLE_CXX_DIR}")

macro(add_test_for_example test_name test_exec)
  add_test(
    ${test_name} ${test_exec} ${ARGN}
  )

  set_tests_properties(
    ${test_name}
    PROPERTIES TIMEOUT 300 FAIL_REGULAR_EXPRESSION "FAILED;WARNING"
  )
endmacro()

set(PROJECT_EXAMPLE_TOP_IMPL_FILES )
set(PROJECT_EXAMPLE_TOP_HEADER_FILES )

foreach(FILE ${PROJECT_EXAMPLE_TOP_IMPL})
  list(APPEND PROJECT_EXAMPLE_TOP_IMPL_FILES "${PROJECT_EXAMPLE_DIR}/${FILE}")
endforeach()

foreach(FILE ${PROJECT_EXAMPLE_TOP_HEADERS})
  list(APPEND PROJECT_EXAMPLE_TOP_HEADER_FILES "${PROJECT_EXAMPLE_DIR}/${FILE}")
endforeach()

foreach(EXAMPLE_FULL ${PROJECT_C_EXAMPLES})
  GET_FILENAME_COMPONENT(
    EXAMPLE
    ${EXAMPLE_FULL}
    NAME_WE
  )

  add_executable(
    ${EXAMPLE}
    ${PROJECT_EXAMPLE_C_DIR}/${EXAMPLE}.cc
    ${PROJECT_EXAMPLE_TOP_HEADER_FILES}
    ${PROJECT_EXAMPLE_TOP_IMPL_FILES}
  )

  add_test_for_example(
    ${EXAMPLE}
    ${CMAKE_CURRENT_BINARY_DIR}/${EXAMPLE}
  )

  target_link_libraries(
    ${EXAMPLE}
    ${FCONTEXT_LIBRARY}
  )
endforeach()

foreach(EXAMPLE_FULL ${PROJECT_CXX_EXAMPLES})
  GET_FILENAME_COMPONENT(
    EXAMPLE
    ${EXAMPLE_FULL}
    NAME_WE
  )

  add_executable(
    ${EXAMPLE}
    ${PROJECT_EXAMPLE_CXX_DIR}/${EXAMPLE}.cc
    ${PROJECT_EXAMPLE_TOP_HEADER_FILES}
    ${PROJECT_EXAMPLE_TOP_IMPL_FILES}
  )

  add_test_for_example(
    ${EXAMPLE}
    ${CMAKE_CURRENT_BINARY_DIR}/${EXAMPLE}
  )

  target_link_libraries(
    ${EXAMPLE}
    ${FCONTEXT_LIBRARY}
  )
endforeach()
