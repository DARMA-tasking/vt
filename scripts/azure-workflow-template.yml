[% warning %]

name: [% test_type %] ([% test_configuration %])

[% triggers %]

[% pr_pattern %]

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  REPO: [% repo %]
  ARCH: [% arch %]
[% linux_env %]
  COMPILER_TYPE: [% compiler_type %]
  COMPILER: [% compiler %]
  BUILD_TYPE: [% build_type %]
  ULIMIT_CORE: [% ulimit_core %]
  CODE_COVERAGE: [% code_coverage %]
  VT_LB: [% vt_lb %]
  VT_TRACE: [% vt_trace %]
  VT_TRACE_RT: [% vt_trace_rt %]
  VT_MIMALLOC: [% vt_mimalloc %]
  VT_DOCS: [% vt_docs %]
  VT_ASAN: [% vt_asan %]
  VT_WERROR: [% vt_werror %]
  VT_POOL: [% vt_pool %]
  VT_EXTENDED_TESTS: [% vt_extended_tests %]
  VT_UNITY_BUILD: [% vt_unity_build %]
  VT_FCONTEXT: [% vt_fcontext %]
  VT_USE_OPENMP: [% vt_use_openmp %]
  VT_USE_STD_THREAD: [% vt_use_std_thread %]
  VT_ZOLTAN: [% vt_zoltan %]
  VT_CI_BUILD: [% vt_ci_build %]
  VT_DIAGNOSTICS: [% vt_diagnostics %]
  CACHE: "$(Agent.TempDirectory)/cache/"
  cache_name: [% cache_name %]
  build_root: "$(CACHE)/[% build_root %]/"
  TS: 0
  TS_YEAR: 0
  TS_MONTH: 0
  TS_DAY: 0

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      [% workflow_runs_on %]
    timeoutInMinutes: 180
    steps:
      - task: Bash@3
        displayName: Job setup
        inputs:
          targetType: 'inline'
          script: |
            [% job_setup %]
      - task: Bash@3
        displayName: Build timestep for caching
        inputs:
          targetType: 'inline'
          script: |
            echo 'string(TIMESTAMP current_date "%H;%M;%S" UTC)' > script
            echo 'execute_process(COMMAND ${CMAKE_COMMAND} -E echo "${current_date}")' >> script
            val=$(cmake -P script)
            echo "##vso[task.setvariable variable=TS]$val"
            echo 'string(TIMESTAMP current_date "%Y" UTC)' > script
            echo 'execute_process(COMMAND ${CMAKE_COMMAND} -E echo "${current_date}")' >> script
            val=$(cmake -P script)
            echo "##vso[task.setvariable variable=TS_YEAR]$val"
            echo 'string(TIMESTAMP current_date "%m" UTC)' > script
            echo 'execute_process(COMMAND ${CMAKE_COMMAND} -E echo "${current_date}")' >> script
            val=$(cmake -P script)
            echo "##vso[task.setvariable variable=TS_MONTH]$val"
            echo 'string(TIMESTAMP current_date "%d" UTC)' > script
            echo 'execute_process(COMMAND ${CMAKE_COMMAND} -E echo "${current_date}")' >> script
            val=$(cmake -P script)
            echo "##vso[task.setvariable variable=TS_DAY]$val"
      - task: Bash@3
        displayName: Output timestamp for caching
        inputs:
          targetType: 'inline'
          script: 'echo "my pipeline variable is $(TS) $(TS_YEAR) $(TS_MONTH) $(TS_DAY)"'
      - task: Cache@2
        displayName: Update cache
        inputs:
          securityNamespace: cache
          key: $(Agent.OS) | "$(cache_name)" | $(TS_YEAR) | $(TS_MONTH) | $(TS_DAY) | $(TS)
          path: '$(build_root)/ccache'
          restoreKeys: |
            $(Agent.OS) | "$(cache_name)" | $(TS_YEAR) | $(TS_MONTH) | $(TS_DAY)
            $(Agent.OS) | "$(cache_name)" | $(TS_YEAR) | $(TS_MONTH)
            $(Agent.OS) | "$(cache_name)" | $(TS_YEAR)
            $(Agent.OS) | "$(cache_name)"
      - task: DockerCompose@0
        displayName: Pull container
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: '**/docker-compose.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'pull --ignore-pull-failures [% docker_target %]'
      - task: DockerCompose@0
        displayName: Build container
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: '**/docker-compose.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'run [% docker_target %]'
      - task: Bash@3
        displayName: Prepare comment with compilation errors and warnings
        condition: and(succeededOrFailed(), eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          # Maximum length of the comment body is 65536 characters.
          # https://github.community/t/maximum-length-for-the-comment-body-in-issues-and-pr/148867
          #
          # Minus some decorations, comment's title, and additional description gives about 64.5k characters.
          #
          # What this script does? -.
          #                         |
          #                         V
          # * reads warnings and errors from a file,
          # * if there aren't any errors or warnings, returns information about it,
          # * replaces special delimiter with CRLF - %0D%0A (essentially restores new lines),
          # * outputs preprocessed report to a variable for the next task (that puts it as a PR comment).
          script: |
            max_comment_size=64450
            val=$(cat $(build_root)/vt/compilation_errors_warnings.out)
            if test -z "$val"
            then
            echo "##vso[task.setvariable variable=comp_errs_warns;]$val"
            exit 0
            fi
            if test ${#val} -gt "$max_comment_size"
            then
            val="${val:0:max_comment_size}%0D%0A%0D%0A%0D%0A ==> And there is more. Read pipeline log. <=="
            fi
            tmp_comment_body=**"$(Build.BuildNumber)"**%0D%0A'`''`''`'%0D%0A${val}%0D%0A'`''`''`'
            delimiter="-=-=-=-"
            new_line="%0D%0A"
            comment_body=${tmp_comment_body//$delimiter/$new_line}
            echo "##vso[task.setvariable variable=comp_errs_warns;]$comment_body"
      - task: GitHubComment@0
        displayName: Put warnings and errors in PR comment
        condition: and(succeededOrFailed(), and(eq(variables['Build.Reason'], 'PullRequest'), ne(variables['comp_errs_warns'], '')))
        inputs:
          gitHubConnection: 'DARMA-tasking'
          repositoryName: $(Build.Repository.Name)
          id: $(System.PullRequest.PullRequestNumber)
          comment: $(comp_errs_warns)
      - task: DockerCompose@0
        displayName: Push container to registry
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryEndpoint: 'dockerRegistryConnection1'
          dockerComposeFile: '**/docker-compose.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'push [% docker_target %]'
      - task: Bash@3
        displayName: Create artifacts
        inputs:
          targetType: 'inline'
          script: |
            zip -j $(Agent.TempDirectory)/LastTest.log.gz $(build_root)/vt/Testing/Temporary/LastTest.log
            zip -j $(Agent.TempDirectory)/cmake-output.log.gz $(build_root)/vt/cmake-output.log
      - task: PublishPipelineArtifact@1
        displayName: Upload CMake test output artifact
        inputs:
          targetPath: '$(Agent.TempDirectory)/LastTest.log.gz'
          artifact: 'CMakeLastTestLog'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        displayName: Upload CMake full output artifact
        inputs:
          targetPath: '$(Agent.TempDirectory)/cmake-output.log.gz'
          artifact: 'CMakeOutputLog'
          publishLocation: 'pipeline'
