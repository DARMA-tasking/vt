
test_type = "PR tests"
vt_lb = 1
vt_trace = 0
vt_trace_rt = 0
vt_trace_only = 1
vt_mimalloc = 0
vt_docs = 0
vt_asan = 0
vt_ubsan = 0
vt_werror = 1
vt_pool = 1
vt_extended_tests = 1
vt_unity_build = 1
vt_production_build = 0
vt_fcontext = 0
vt_zoltan = 0
vt_ci_build = 1
vt_tests_num_nodes = 2
test_lb_schema = 0
ulimit_core = 0
code_coverage = 0
build_type = release
repo = lifflander1/vt
arch = amd64
is_ubuntu = 1
distro = 20.04
linux = ubuntu
cache_dir = "~/.local/cache/"
cache_name = "[% linux %]-[% compiler %]-cache"
docker_target = "[% linux %]-cpp-clean"
triggers = "trigger:\\n  branches:\\n    include:\\n      - develop\\n      - main"
warning = "###############################################################################\\n############## Warning this is a generated file---do not modify ###############\\n###############################################################################"
job_name = build
workflow_runs_on = "vmImage: 'ubuntu-22.04'"
build_root = $(ARCH)-[% linux %]-$(UBUNTU)-$(COMPILER)-cache
linux_env = "  UBUNTU: [% distro %]"
vt_diagnostics = 1
pr_pattern = "pr:\\n  drafts: false\\n  autoCancel: true\\n  branches:\\n    include:\\n      - '*'\\n"
vt_no_color = 1
vt_build_shared_libs = 0
vt_inclusion = TPL
cmake_cxx_standard = 17

[PR-tests-intel-oneAPI]
test_configuration = "intel icpx, ubuntu, mpich"
compiler_type = intel-oneapi
compiler = icpx
cache_name = ubuntu-intel-oneapi-icpx-cache
output_name = ci/azure/azure-intel-oneapi-icpx-ubuntu-mpich.yml
vt_trace = 1
vt_pool = 0
vt_extended_tests = 0

[PR-tests-intel-classic]
test_configuration = "intel icpc, ubuntu, mpich"
compiler_type = intel-oneapi
compiler = icpc
cache_name = ubuntu-intel-oneapi-icpc-cache
output_name = ci/azure/azure-intel-oneapi-icpc-ubuntu-mpich.yml
vt_extended_tests = 0

[PR-tests-nvcc-11-0]
test_configuration = "nvidia cuda 11.0, ubuntu, mpich"
compiler_type = nvidia
compiler = 11.0.3
distro = 20.04
cache_name = ubuntu-nvidia-11-cache
output_name = ci/azure/azure-nvidia-11-ubuntu-mpich.yml
vt_extended_tests = 0
job_name = build_optional
vt_diagnostics = 0
vt_trace = 1
vt_pool = 0
vt_tests_num_nodes = 4

[PR-tests-nvcc-11-2]
test_configuration = "nvidia cuda 11.2, ubuntu, mpich"
compiler_type = nvidia
compiler = 11.2.0
distro = 20.04
cache_name = ubuntu-nvidia-11.2-cache
output_name = ci/azure/azure-nvidia-11-2-ubuntu-mpich.yml
vt_extended_tests = 0
job_name = build_optional
vt_diagnostics = 0
vt_trace = 1
vt_pool = 0
vt_tests_num_nodes = 4

[PR-tests-gcc-8]
test_configuration = "gcc-8, ubuntu, mpich, address sanitizer"
compiler_type = gnu
compiler = gcc-8
distro = 18.04
vt_trace = 1
vt_pool = 0
vt_asan = 1
vt_unity_build = 0
output_name = ci/azure/azure-gcc-8-ubuntu-mpich.yml
lsan_options = suppressions=/vt/tests/lsan.supp

[PR-tests-gcc-9]
test_configuration = "gcc-9, ubuntu, mpich, zoltan, json schema test"
compiler_type = gnu
compiler = gcc-9
output_name = ci/azure/azure-gcc-9-ubuntu-mpich.yml
test_lb_schema = 1
vt_zoltan = 1

[PR-tests-gcc-10]
test_configuration = "gcc-10, ubuntu, openmpi, no LB"
compiler_type = gnu
compiler = gcc-10
docker_target = "[% linux %]-cpp-clean-openmpi"
output_name = ci/azure/azure-gcc-10-ubuntu-openmpi.yml
vt_lb = 0
vt_tests_num_nodes = 4

[PR-tests-gcc-11]
test_configuration = "gcc-11, ubuntu, mpich, trace runtime, coverage"
compiler_type = gnu
compiler = gcc-11
distro = 22.04
vt_trace = 1
vt_trace_rt = 1
vt_unity_build = 0
code_coverage = 1
docker_target = "[% linux %]-cpp-clean-noinstall"
output_name = ci/azure/azure-gcc-11-ubuntu-mpich.yml

[PR-tests-gcc-12]
test_configuration = "gcc-12, ubuntu, mpich"
compiler_type = gnu
compiler = gcc-12
distro = 22.04
output_name = ci/azure/azure-gcc-12-ubuntu-mpich.yml
pr_pattern = "pr:\\n  drafts: true\\n  autoCancel: true\\n  branches:\\n    include:\\n      - '*'\\n"

[PR-tests-clang-13-alpine]
test_configuration = "clang-13, alpine, mpich"
compiler_type = clang
compiler = clang-13
is_ubuntu = 0
linux = alpine
linux_env =""
output_name = ci/azure/azure-clang-alpine-mpich.yml
build_root = $(ARCH)-[% linux %]-$(COMPILER)-cache
vt_production_build = 1

[PR-tests-clang-9]
test_configuration = "clang-9, ubuntu, mpich"
compiler_type = clang
compiler = clang-9
output_name = ci/azure/azure-clang-9-ubuntu-mpich.yml
vt_build_shared_libs = 1
vt_inclusion = EXT_LIB
vt_werror = 0

[PR-tests-clang-10]
test_configuration = "clang-10, ubuntu, mpich"
compiler_type = clang
compiler = clang-10
output_name = ci/azure/azure-clang-10-ubuntu-mpich.yml
vt_tests_num_nodes = 4
vt_ubsan = 1
ubsan_options = "print_stacktrace=1"

[PR-tests-clang-11]
test_configuration = "clang-11, ubuntu, mpich"
compiler_type = clang
compiler = clang-11
distro = 22.04
output_name = ci/azure/azure-clang-11-ubuntu-mpich.yml
vt_fcontext = 1

[PR-tests-clang-12]
test_configuration = "clang-12, ubuntu, mpich"
compiler_type = clang
compiler = clang-12
distro = 22.04
output_name = ci/azure/azure-clang-12-ubuntu-mpich.yml

[PR-tests-clang-13]
test_configuration = "clang-13, ubuntu, mpich"
compiler_type = clang
compiler = clang-13
distro = 22.04
output_name = ci/azure/azure-clang-13-ubuntu-mpich.yml

[PR-tests-clang-14]
test_configuration = "clang-14, ubuntu, mpich"
compiler_type = clang
compiler = clang-14
distro = 22.04
output_name = ci/azure/azure-clang-14-ubuntu-mpich.yml
vt_trace = 1
