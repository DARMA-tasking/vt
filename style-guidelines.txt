
=== Example Code Following Style ===

using NodeType = uint16_t;

struct MyClassName : OtherClass {
  // if it is above 80 cols, wrap to next line with regular identing
  static inline typename Abc<T,X>::type my_simple_method(
    int a, int b, int c, int d
  );

  static void my_test(int a) {
    int a;
    int tmp;
    int my_local_count = 0;
  }

  // if function returns bool, it should start with "is" or "has"
  bool isValid();
  bool hasValue();

private:
  int my_data_;
  bool is_coll; // if data is boolean, it should start with "is" or "has"
};

enum eMyEnum {
  ConstantOne = 0,
  ConstantTwo = 1,
};


template <typename T>
struct A {
 
};


Suggestion:
 
-    Use a space in between template and the bracket.
-    Use “typename” instead of “class” for all possible cases (the only time you have to use “class” is when you have a “template template”).
 
Namespaces:
 
-    Do not indent code under a namespace.
-    Always combine multiple nested namespaces in one line (makes it easier to identify the full namespace path)
 
namespace X { namespace Y {
 
}} // end namespace X::Y